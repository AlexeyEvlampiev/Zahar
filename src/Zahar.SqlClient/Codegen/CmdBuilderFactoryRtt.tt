<#@ template language="C#" inherits="Zahar.SqlClient.Codegen.RuntimeTextTemplate"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

/// <summary>
/// SQL command builder factory. Use istances of this class to construct stored procedure command builder objects.
/// </summary>
public sealed partial class <#= SqlCmdBuilderFactoryClassName #> : <#= typeof(SqlCmdBuilderFactory).Name #>
{
	#region Ctor

	partial void OnCreated();

	/// <summary>
    /// Initializes a new instance of the <see cref="<#= SqlCmdBuilderFactoryClassName #>"/> class.
    /// </summary>
    /// <param name="connectionString">SQL Server database connection string.</param>
	/// <exception cref="global::System.ArgumentNullException">connectionString</exception>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= SqlCmdBuilderFactoryClassName #>(string connectionString) : base(connectionString) { OnCreated(); }

	/// <summary>
    /// Initializes a new instance of the <see cref="<#= SqlCmdBuilderFactoryClassName #>"/> class.
	/// Implies the SQL Server context connection.
    /// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= SqlCmdBuilderFactoryClassName #>() : base() { OnCreated(); }

	/// <summary>
    /// Initializes a new instance of the <see cref="<#= SqlCmdBuilderFactoryClassName #>"/> class.
    /// </summary>
    /// <param name="connectionStringFactory">SQL Server database connection string factory.</param>
	/// <exception cref="System.ArgumentNullException">connectionStringFactory</exception>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= SqlCmdBuilderFactoryClassName #>(System.Func<string> connectionStringFactory) : base(connectionStringFactory) { OnCreated(); }

	/// <summary>
    /// Initializes a new instance of the <see cref="<#= SqlCmdBuilderFactoryClassName #>"/> class.
    /// </summary>
    /// <param name="connectionFactory">SQL Server database connection string factory.</param>
    /// <exception cref="System.ArgumentNullException">connectionFactory</exception>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= SqlCmdBuilderFactoryClassName #>(System.Func<System.Data.SqlClient.SqlConnection> connectionFactory) : base(connectionFactory) { OnCreated(); }
	#endregion <# foreach(var procedure in Procedures){ 
	string spFullName = procedure.FullName;
	string factoryClass = GetStoredProcedureCmdBuilderClassName(spFullName);
	var parameters = procedure.Parameters.ToList();
	var inputParameters = parameters.Where(p=> p.Direction == ParameterDirection.Input || p.Direction == ParameterDirection.InputOutput).ToList();
	var tableInputParameters = inputParameters.Where(p=> p.TableTypeSchema != null);
	var ixPropertyTypeNamesByParameter = new Dictionary<object, string>();
	foreach(var p in parameters)
	{
		ixPropertyTypeNamesByParameter[p] = GetPropertyTypeName(p.DataType, true);
	}
	foreach(var p in tableInputParameters)
	{
		var schema = p.TableTypeSchema;
		var dataTypeName = GetUserDefinedDataTableClassName(schema.TableName);
		ixPropertyTypeNamesByParameter[p] = dataTypeName;
	}
	string paramsDeclaration = string.Join(", ",
		from p in inputParameters
		let type = ixPropertyTypeNamesByParameter[p]
		let name = GetParameterName(p.ParameterName)
		select string.Format("{0} {1}", type, name));
	 #> 

	/// <summary>
    /// Creates a new instance of the <#= spFullName #> command builder.
    /// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= factoryClass #> Create<#= factoryClass #>() { return new <#= factoryClass #>(); } 

	<# if(inputParameters.Any()){ #>

	/// <summary>
    /// Creates a new instance of the <#= spFullName #> command builder.
    /// </summary><# foreach(var p in inputParameters){ #> 
	/// <param name="<#= GetParameterName(p.ParameterName) #>">Parameter <#= parameters.IndexOf(p) #> (<#= p.Direction #>)</param> <# } #> 
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= factoryClass #> Create<#= factoryClass #>(<#= paramsDeclaration #>) 
	{ 
		return new <#= factoryClass #>()
		{<# foreach(var p in inputParameters){ #> 
			<#= GetPropertyName(p.ParameterName) #> = <#= GetParameterName(p.ParameterName) #>, <# } #> 			
		}; 
	} 

	<# } #>
	
	<# } /* foreach(var procedure in Procedures) */ #> 
}