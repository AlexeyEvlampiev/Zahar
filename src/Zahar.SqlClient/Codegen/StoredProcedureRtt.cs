// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Zahar.SqlClient.Codegen
{
    using System.Data;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class StoredProcedureRtt : Zahar.SqlClient.Codegen.RuntimeTextTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {

	string utilsClassName = typeof(SqlCmdBuilder).Name;
	string sqlSpCmdBuilderClassName = typeof(SqlSpCmdBuilder).Name;
	string factoryClassName = GetStoredProcedureCmdBuilderClassName(Procedure.FullName);		
	var adapterClassNames = Procedure.ResultSchemas.Select(tbl=> GetStoredProcedureReaderAdapterClassName(Procedure.FullName, Procedure.GetResultOrdinal(tbl))).ToList();
	var parameters = Procedure.Parameters.ToList();
	var resultSchemas = Procedure.ResultSchemas.ToList();
	var inputParameters = parameters.Where(p=> p.Direction == ParameterDirection.Input || p.Direction == ParameterDirection.InputOutput).ToList();
	var outputParameters = parameters.Where(p=> p.Direction != ParameterDirection.Input).ToList();
	string outputValuesClassName = outputParameters.Count > 1 
		? GetStoredProcedureOutputClassName(Procedure.FullName)
		: StoredProcedureBasicOutputClassName;
	bool requireOutputClass = outputParameters.Count > 1;
	var nonTableInputParameters = inputParameters.Where(p=> p.TableTypeSchema == null);
	var tableInputParameters = inputParameters.Where(p=> p.TableTypeSchema != null);
	var ixPropertyTypeNamesByParameter = new Dictionary<object, string>();
	foreach(var p in parameters)
	{
		ixPropertyTypeNamesByParameter[p] = GetPropertyTypeName(p.DataType, true);
	}
	foreach(var p in tableInputParameters)
	{
		var schema = p.TableTypeSchema;
		var dataTypeName = GetUserDefinedDataTableClassName(schema.TableName);
		ixPropertyTypeNamesByParameter[p] = dataTypeName;
	}

	string paramsDeclaration = string.Join(", ",
		from p in inputParameters
		let type = ixPropertyTypeNamesByParameter[p]
		let name = GetParameterName(p.ParameterName)
		select string.Format("{0} {1}", type, name));

 
            this.Write(" \r\n\r\n\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" typed command builder.\r\n/// </summary>\r\npublic sealed partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(factoryClassName));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(sqlSpCmdBuilderClassName));
            this.Write("\r\n{\r\n\t#region Private Fields\r\n\t");
 foreach(var p in tableInputParameters){ 
            this.Write(" \r\n\t[global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.Debu" +
                    "ggerBrowsableState.Never)]\r\n\tprivate ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ixPropertyTypeNamesByParameter[p]));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFieldName(p.ParameterName)));
            this.Write("; ");
 } 
            this.Write(" \r\n\t#endregion\r\n\r\n\t/// <summary>\r\n    /// Initializes a new instance of the <see " +
                    "cref=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(factoryClassName));
            this.Write("\"/> class (");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write("). \r\n    /// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(factoryClassName));
            this.Write("() : base(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.Schema));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.Name));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write("\")\r\n\t{\r\n\t\tOnInit();\r\n\t}\r\n\r\n\t#region Partial Methods\r\n\tstatic partial void OnInit(" +
                    ");\r\n\tstatic partial void OnCommandCreated(global::System.Data.SqlClient.SqlComma" +
                    "nd command);\r\n\t");
 foreach(var p in parameters.Where(p=> p.Direction != ParameterDirection.ReturnValue)){ 
		var propertyName = GetPropertyName(p.ParameterName); 
            this.Write(" \r\n\tstatic partial void On");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write("ParameterCreated(global::System.Data.SqlClient.SqlParameter parameter); ");
 } 
            this.Write(" \r\n\t#endregion\r\n\r\n\t/// <summary>\r\n\t/// Configures the given command object to exe" +
                    "cute the ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" -procedure.\r\n\t/// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic override void BuildCommand(global::System.Data.SqlClient.SqlCommand co" +
                    "mmand)\r\n\t{\r\n\t\tif(ReferenceEquals(command, null))\r\n\t\t\tthrow new global::System.Ar" +
                    "gumentNullException(nameof(command));\t\t\r\n\t\tvar parameters = CreateParametersArra" +
                    "y();");
 foreach(var p in inputParameters){ 
			int index = parameters.IndexOf(p); 
			var propertyName = GetPropertyName(p.ParameterName); 
            this.Write(" \r\n\t\tparameters[");
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            this.Write("].Value = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write("; ");
 } 
            this.Write(" \r\n\t\tfor (int i = 0; i < parameters.Length; ++i)\r\n\t\t{\r\n\t\t\tvar parameter = paramet" +
                    "ers[i];\r\n\t\t\tif (parameter.Value == null)\r\n\t\t\t\tparameter.Value = global::System.D" +
                    "BNull.Value;\r\n\t\t}\r\n\t\tcommand.CommandText = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write("\";\r\n\t\tcommand.CommandType = global::System.Data.CommandType.StoredProcedure;\t\t\r\n\t" +
                    "\tcommand.Parameters.Clear();\r\n\t\tcommand.Parameters.AddRange(parameters);\r\n\t\tOnCo" +
                    "mmandCreated(command);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Creates new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" command output values set. \r\n\t/// </summary>\r\n\t/// <param name=\"command\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" command</param>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(outputValuesClassName));
            this.Write(" BuildOutputValues(global::System.Data.SqlClient.SqlCommand command)\r\n\t{\t\t\t\r\n\t\tre" +
                    "turn new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(outputValuesClassName));
            this.Write("(command);\r\n\t}\r\n\t");
 if(adapterClassNames.Count > 0){  
            this.Write(" \r\n\r\n\t/// <summary>\r\n\t/// Creates a typed wrapper for the given reader object.\r\n\t" +
                    "/// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(adapterClassNames[0]));
            this.Write(" BuildRecordAdapter(global::System.Data.SqlClient.SqlDataReader reader)\r\n\t{\t\t\r\n\t\t" +
                    "return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(adapterClassNames[0]));
            this.Write("(reader);\r\n\t}\r\n\t");
 } 
            this.Write("\t\r\n\r\n\t/// <summary>\r\n\t/// \r\n\t/// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic static global::System.Data.SqlClient.SqlParameter[] CreateParametersAr" +
                    "ray()\r\n\t{\r\n\t\tvar parameters = new []\r\n\t\t{");
 for(int i = 0; i < parameters.Count; ++i){ 
			var parameter = parameters[i];  
            this.Write(" \r\n\t\t\tnew global::System.Data.SqlClient.SqlParameter(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ParameterName));
            this.Write("\", global::System.Data.SqlDbType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.SqlDbType));
            this.Write("){ ");
  
				Write("Direction = global::System.Data.ParameterDirection.{0}", parameter.Direction);
				if(parameter.IsNullable)Write(", IsNullable = true");
				if(parameter.Precision > 0)Write(", Precision = {0}", parameter.Precision);
				if(parameter.Scale > 0)Write(", Scale = {0}", parameter.Scale);
				if(parameter.Size != 0)Write(", Size = {0}", parameter.Size); 
				Write("},");
				} 
            this.Write(" \r\n\t\t};\r\n\r\n\t\t");
 foreach(var p in parameters.Where(p=> p.Direction != ParameterDirection.ReturnValue)){ 
			var index = parameters.IndexOf(p);
			var propertyName = GetPropertyName(p.ParameterName); 
            this.Write(" \r\n\t\tOn");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write("ParameterCreated(parameters[");
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            this.Write("]); ");
 } 
            this.Write(" \r\n\r\n\t\treturn parameters;\r\n\t}\r\n\t#region Sql Parameter Properties\r\n");
 foreach(var p in nonTableInputParameters){ 
	   int ordinal = parameters.IndexOf(p);
	   var propertyName = GetPropertyName(p.ParameterName);
	   var csParameterName = Regex.Replace(p.ParameterName, "^@", string.Empty);
	   var dataTypeName = GetPropertyTypeName(p.DataType, true);	   

            this.Write("\t/// <summary>\r\n\t/// Parameter ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ordinal));
            this.Write(" (");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Direction));
            this.Write(").\r\n\t/// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlParameterAttribute));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ordinal));
            this.Write(",\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(csParameterName));
            this.Write("\", global::System.Data.SqlDbType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.SqlDbType));
            this.Write(", global::System.Data.ParameterDirection.");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Direction));
 if(p.Size > 0)Write(", {0}", p.Size); 
            this.Write(")]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dataTypeName));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write(" { get; set; }\r\n");
 } 
            this.Write("\r\n\r\n");
 foreach(var p in tableInputParameters){ 
	   int ordinal = parameters.IndexOf(p);
	   var schema = p.TableTypeSchema;
	   var propertyName = GetPropertyName(p.ParameterName);
	   var csParameterName = Regex.Replace(p.ParameterName, "^@", string.Empty);
	   var fieldName = GetFieldName(propertyName);
	   var dataTypeName = GetUserDefinedDataTableClassName(schema.TableName);

            this.Write("\t/// <summary>\r\n\t/// Parameter ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameters.IndexOf(p)));
            this.Write(" (User defined table type: ");
            this.Write(this.ToStringHelper.ToStringWithCulture(schema.TableName));
            this.Write(")\r\n\t/// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlParameterAttribute));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ordinal));
            this.Write(",\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(csParameterName));
            this.Write("\", global::System.Data.SqlDbType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.SqlDbType));
            this.Write(", global::System.Data.ParameterDirection.");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Direction));
            this.Write(")]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dataTypeName));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write("\r\n\t{\r\n\t\tget { return this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            this.Write(" ?? (this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            this.Write(" = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dataTypeName));
            this.Write("()); }\r\n\t\tset { this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));
            this.Write(" = value; }\r\n\t}\r\n");
 } 
            this.Write("\t#endregion\r\n}\r\n\r\n\r\n");
 if(requireOutputClass){ 
            this.Write("/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" output parameters\r\n/// </summary>\r\npublic partial struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(outputValuesClassName));
            this.Write("\r\n{\r\n\treadonly global::System.Data.SqlClient.SqlCommand m_command;\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(outputValuesClassName));
            this.Write("(global::System.Data.SqlClient.SqlCommand command)\r\n\t{\r\n\t\tif(ReferenceEquals(comm" +
                    "and, null))\r\n\t\t\tthrow new global::System.ArgumentNullException(nameof(command));" +
                    "");
 foreach(var p in outputParameters){ 
            this.Write(" \r\n\t\tglobal::System.Diagnostics.Debug.Assert(command.Parameters.Contains(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.ParameterName));
            this.Write("\")); ");
 } 
            this.Write("\t\r\n\t\tglobal::System.Diagnostics.Debug.Assert(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write("\".Equals(command.CommandText, global::System.StringComparison.OrdinalIgnoreCase))" +
                    ";\t\t\t\t\r\n\t\tm_command = command;\r\n\t}\r\n\r\n\t");
 foreach(var p in outputParameters){ 
		int ordinal = parameters.IndexOf(p);
		var csParameterName = Regex.Replace(p.ParameterName, "^@", string.Empty);
		var typeName = ixPropertyTypeNamesByParameter[p];
		var propertyName = GetPropertyName(p.ParameterName); 
            this.Write(" \r\n\t/// <summary>\r\n\t/// \r\n\t/// </summary>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlParameterAttribute));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ordinal));
            this.Write(",\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(csParameterName));
            this.Write("\", global::System.Data.SqlDbType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.SqlDbType));
            this.Write(", global::System.Data.ParameterDirection.");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Direction));
            this.Write(")]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write(" => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(utilsClassName));
            this.Write(".ToClrValue<");
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            this.Write(">(m_command.Parameters[\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.ParameterName));
            this.Write("\"].Value);\r\n\t");
 } 
            this.Write(" \r\n}\r\n");
 } 
            this.Write("\r\n\r\n");
 for(int i = 0; i < adapterClassNames.Count; ++i){ 
	string className = adapterClassNames[i]; 
	string nextReaderClassName = i+1 < adapterClassNames.Count ? adapterClassNames[i+1] : null; 
	var schema = resultSchemas[i]; 
            this.Write("/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" query result[");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write("]. \r\n/// </summary>\r\npublic partial struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write(@"
{
	/// <summary>
	/// Gets the inner <see cref=""System.Data.SqlClient.SqlDataReader""/> object.
	/// </summary>
	public global::System.Data.SqlClient.SqlDataReader InnerReader { get; }

	/// <summary>
    /// Initializes a new instance of the <see cref=""");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"reader\">The inner <see cref" +
                    "=\"System.Data.SqlClient.SqlDataReader\"/>.</param>\r\n    /// <exception cref=\"Syst" +
                    "em.ArgumentNullException\">reader</exception>\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write(@"(
		global::System.Data.SqlClient.SqlDataReader reader) : this()
	{
		if(ReferenceEquals(reader, null))
			throw new global::System.ArgumentNullException(nameof(reader));
		InnerReader = reader;
	}

	/// <summary>
	/// An asynchronous version of Read, which advances the inner <see cref=""System.Data.SqlClient.SqlDataReader""/> to the next record in a result set. 
	/// This method invokes ReadAsync with CancellationToken.None.
	/// </summary>
	[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write(@"]
	public global::System.Threading.Tasks.Task<bool> ReadAsync() { return InnerReader.ReadAsync(global::System.Threading.CancellationToken.None); }

	/// <summary>
	/// An asynchronous version of Read, which advances the inner <see cref=""System.Data.SqlClient.SqlDataReader""/> to the next record in a result set. 
	/// </summary>
	/// <param name=""token"">The cancellation instruction.</param>
	/// <returns>A task representing the asynchronous operation.</returns>
	[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write(@"]
	public global::System.Threading.Tasks.Task<bool> ReadAsync(global::System.Threading.CancellationToken token) { return InnerReader.ReadAsync(token); }


	/// <summary>
	/// Advances the inner <see cref=""System.Data.SqlClient.SqlDataReader""/> to the next record.
	/// </summary>
	/// <returns>true if there are more rows; otherwise false.</returns>
	[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic bool Read() { return InnerReader.Read(); } ");
 if( nextReaderClassName != null ){ 
            this.Write(" \r\n\r\n\t/// <summary>\r\n\t/// Advances the inner data reader to the next result, when" +
                    " reading the results of batch Transact-SQL statements.\r\n\t/// </summary>\r\n\t/// <r" +
                    "eturns>Next result <see cref=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write("\"/> typed record adapter.</returns>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write(" NextResult() \r\n\t{ \r\n\t\tif(!InnerReader.NextResult())\r\n\t\t\tthrow new global::System" +
                    ".InvalidOperationException($\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" > InnerReader.NextResult() returned false (next result number: ");
            this.Write(this.ToStringHelper.ToStringWithCulture(i+1));
            this.Write(").\");\r\n\t\treturn new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write(@"(InnerReader); 
	}

	/// <summary>
	/// An asynchronous version of NextResult, which advances the inner reader to the next result when reading the results of a batch of statements.
	/// </summary>
	/// <param name=""token"">The cancellation instruction.</param>
	/// <returns>Next result <see cref=""");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write("\"/> typed record adapter.</returns>\r\n\t/// <exception cref=\"System.InvalidOperatio" +
                    "nException\"></exception>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic async global::System.Threading.Tasks.Task<");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write("> NextResultAsync(global::System.Threading.CancellationToken token) \r\n\t{ \r\n\t\tif(!" +
                    "(await InnerReader.NextResultAsync(token)))\r\n\t\t\tthrow new global::System.Invalid" +
                    "OperationException($\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Procedure.FullName));
            this.Write(" > InnerReader.NextResult() returned false (next result number: ");
            this.Write(this.ToStringHelper.ToStringWithCulture(i+1));
            this.Write(").\");\r\n\t\treturn new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write(@"(InnerReader); 
	}

	/// <summary>
	/// An asynchronous version of NextResult, which advances the inner reader to the next result when reading the results of a batch of statements.
	/// This method invokes NextResultAsync with CancellationToken.None.
	/// </summary>
	/// <returns>Next result <see cref=""");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write("\"/> typed record adapter.</returns>\r\n\t/// <exception cref=\"System.InvalidOperatio" +
                    "nException\"></exception>\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("]\r\n\t[");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("]\r\n\tpublic global::System.Threading.Tasks.Task<");
            this.Write(this.ToStringHelper.ToStringWithCulture(nextReaderClassName));
            this.Write("> NextResultAsync() { return this.NextResultAsync(global::System.Threading.Cancel" +
                    "lationToken.None); }\r\n\t");
 } 
            this.Write(" \r\n\r\n\t");
 foreach(DataColumn column in schema.Columns){ 
		int ordinal = column.Ordinal;
		string propertyName = GetPropertyName(column.ColumnName);
		string propertyDataType = GetPropertyTypeName(column.DataType, column.AllowDBNull); 
            this.Write(" \r\n\t/// <summary>\r\n\t/// \r\n\t/// </summary>\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyDataType));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write(" => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(utilsClassName));
            this.Write(".ToClrValue<");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyDataType));
            this.Write(">(InnerReader[");
            this.Write(this.ToStringHelper.ToStringWithCulture(ordinal));
            this.Write("]); ");
 } 
            this.Write(" \r\n}\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
