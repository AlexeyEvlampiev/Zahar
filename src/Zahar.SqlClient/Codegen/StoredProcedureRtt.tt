<#@ template language="C#" inherits="Zahar.SqlClient.Codegen.RuntimeTextTemplate"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	string utilsClassName = typeof(SqlCmdBuilder).Name;
	string sqlSpCmdBuilderClassName = typeof(SqlSpCmdBuilder).Name;
	string factoryClassName = GetStoredProcedureCmdBuilderClassName(Procedure.FullName);		
	var adapterClassNames = Procedure.ResultSchemas.Select(tbl=> GetStoredProcedureReaderAdapterClassName(Procedure.FullName, Procedure.GetResultOrdinal(tbl))).ToList();
	var parameters = Procedure.Parameters.ToList();
	var resultSchemas = Procedure.ResultSchemas.ToList();
	var inputParameters = parameters.Where(p=> p.Direction == ParameterDirection.Input || p.Direction == ParameterDirection.InputOutput).ToList();
	var outputParameters = parameters.Where(p=> p.Direction != ParameterDirection.Input).ToList();
	string outputValuesClassName = outputParameters.Count > 1 
		? GetStoredProcedureOutputClassName(Procedure.FullName)
		: StoredProcedureBasicOutputClassName;
	bool requireOutputClass = outputParameters.Count > 1;
	var nonTableInputParameters = inputParameters.Where(p=> p.TableTypeSchema == null);
	var tableInputParameters = inputParameters.Where(p=> p.TableTypeSchema != null);
	var ixPropertyTypeNamesByParameter = new Dictionary<object, string>();
	foreach(var p in parameters)
	{
		ixPropertyTypeNamesByParameter[p] = GetPropertyTypeName(p.DataType, true);
	}
	foreach(var p in tableInputParameters)
	{
		var schema = p.TableTypeSchema;
		var dataTypeName = GetUserDefinedDataTableClassName(schema.TableName);
		ixPropertyTypeNamesByParameter[p] = dataTypeName;
	}

	string paramsDeclaration = string.Join(", ",
		from p in inputParameters
		let type = ixPropertyTypeNamesByParameter[p]
		let name = GetParameterName(p.ParameterName)
		select string.Format("{0} {1}", type, name));

 #> 


/// <summary>
/// <#= Procedure.FullName #> typed command builder.
/// </summary>
public sealed partial class <#= factoryClassName #> : <#= sqlSpCmdBuilderClassName #>
{
	#region Private Fields
	<# foreach(var p in tableInputParameters){ #> 
	[global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
	private <#= ixPropertyTypeNamesByParameter[p] #> <#= GetFieldName(p.ParameterName) #>; <# } #> 
	#endregion

	/// <summary>
    /// Initializes a new instance of the <see cref="<#= factoryClassName #>"/> class (<#= Procedure.FullName #>). 
    /// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= factoryClassName #>() : base("<#= Procedure.Schema #>", "<#= Procedure.Name #>", "<#= Procedure.FullName #>")
	{
		OnInit();
	}

	#region Partial Methods
	static partial void OnInit();
	static partial void OnCommandCreated(global::System.Data.SqlClient.SqlCommand command);
	<# foreach(var p in parameters.Where(p=> p.Direction != ParameterDirection.ReturnValue)){ 
		var propertyName = GetPropertyName(p.ParameterName); #> 
	static partial void On<#= propertyName #>ParameterCreated(global::System.Data.SqlClient.SqlParameter parameter); <# } #> 
	#endregion

	/// <summary>
	/// Configures the given command object to execute the <#= Procedure.FullName #> -procedure.
	/// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public override void BuildCommand(global::System.Data.SqlClient.SqlCommand command)
	{
		if(ReferenceEquals(command, null))
			throw new global::System.ArgumentNullException(nameof(command));		
		var parameters = CreateParametersArray();<# foreach(var p in inputParameters){ 
			int index = parameters.IndexOf(p); 
			var propertyName = GetPropertyName(p.ParameterName); #> 
		parameters[<#= index #>].Value = this.<#= propertyName #>; <# } #> 
		for (int i = 0; i < parameters.Length; ++i)
		{
			var parameter = parameters[i];
			if (parameter.Value == null)
				parameter.Value = global::System.DBNull.Value;
		}
		command.CommandText = "<#= Procedure.FullName #>";
		command.CommandType = global::System.Data.CommandType.StoredProcedure;		
		command.Parameters.Clear();
		command.Parameters.AddRange(parameters);
		OnCommandCreated(command);
	}

	/// <summary>
	/// Creates new <#= Procedure.FullName #> command output values set. 
	/// </summary>
	/// <param name="command"><#= Procedure.FullName #> command</param>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= outputValuesClassName #> BuildOutputValues(global::System.Data.SqlClient.SqlCommand command)
	{			
		return new <#= outputValuesClassName #>(command);
	}
	<# if(adapterClassNames.Count > 0){  #> 

	/// <summary>
	/// Creates a typed wrapper for the given reader object.
	/// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= adapterClassNames[0] #> BuildRecordAdapter(global::System.Data.SqlClient.SqlDataReader reader)
	{		
		return new <#= adapterClassNames[0] #>(reader);
	}
	<# } #>	

	/// <summary>
	/// 
	/// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public static global::System.Data.SqlClient.SqlParameter[] CreateParametersArray()
	{
		var parameters = new []
		{<# for(int i = 0; i < parameters.Count; ++i){ 
			var parameter = parameters[i];  #> 
			new global::System.Data.SqlClient.SqlParameter("<#= parameter.ParameterName #>", global::System.Data.SqlDbType.<#= parameter.SqlDbType #>){ <#  
				Write("Direction = global::System.Data.ParameterDirection.{0}", parameter.Direction);
				if(parameter.IsNullable)Write(", IsNullable = true");
				if(parameter.Precision > 0)Write(", Precision = {0}", parameter.Precision);
				if(parameter.Scale > 0)Write(", Scale = {0}", parameter.Scale);
				if(parameter.Size != 0)Write(", Size = {0}", parameter.Size); 
				Write("},");
				} #> 
		};

		<# foreach(var p in parameters.Where(p=> p.Direction != ParameterDirection.ReturnValue)){ 
			var index = parameters.IndexOf(p);
			var propertyName = GetPropertyName(p.ParameterName); #> 
		On<#= propertyName #>ParameterCreated(parameters[<#= index #>]); <# } #> 

		return parameters;
	}
	#region Sql Parameter Properties
<# foreach(var p in nonTableInputParameters){ 
	   int ordinal = parameters.IndexOf(p);
	   var propertyName = GetPropertyName(p.ParameterName);
	   var csParameterName = Regex.Replace(p.ParameterName, "^@", string.Empty);
	   var dataTypeName = GetPropertyTypeName(p.DataType, true);	   
#>
	/// <summary>
	/// Parameter <#= ordinal #> (<#= p.Direction #>).
	/// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	[<#= SqlParameterAttribute #>(<#= ordinal #>,"<#= csParameterName #>", global::System.Data.SqlDbType.<#= p.SqlDbType #>, global::System.Data.ParameterDirection.<#= p.Direction #><# if(p.Size > 0)Write(", {0}", p.Size); #>)]
	public <#= dataTypeName #> <#= propertyName #> { get; set; }
<# } #>


<# foreach(var p in tableInputParameters){ 
	   int ordinal = parameters.IndexOf(p);
	   var schema = p.TableTypeSchema;
	   var propertyName = GetPropertyName(p.ParameterName);
	   var csParameterName = Regex.Replace(p.ParameterName, "^@", string.Empty);
	   var fieldName = GetFieldName(propertyName);
	   var dataTypeName = GetUserDefinedDataTableClassName(schema.TableName);
#>
	/// <summary>
	/// Parameter <#= parameters.IndexOf(p) #> (User defined table type: <#= schema.TableName #>)
	/// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	[<#= SqlParameterAttribute #>(<#= ordinal #>,"<#= csParameterName #>", global::System.Data.SqlDbType.<#= p.SqlDbType #>, global::System.Data.ParameterDirection.<#= p.Direction #>)]
	public <#= dataTypeName #> <#= propertyName #>
	{
		get { return this.<#= fieldName #> ?? (this.<#= fieldName #> = new <#= dataTypeName #>()); }
		set { this.<#= fieldName #> = value; }
	}
<# } #>
	#endregion
}


<# if(requireOutputClass){ #>
/// <summary>
/// <#= Procedure.FullName #> output parameters
/// </summary>
public partial struct <#= outputValuesClassName #>
{
	readonly global::System.Data.SqlClient.SqlCommand m_command;
	public <#= outputValuesClassName #>(global::System.Data.SqlClient.SqlCommand command)
	{
		if(ReferenceEquals(command, null))
			throw new global::System.ArgumentNullException(nameof(command));<# foreach(var p in outputParameters){ #> 
		global::System.Diagnostics.Debug.Assert(command.Parameters.Contains("<#= p.ParameterName #>")); <# } #>	
		global::System.Diagnostics.Debug.Assert("<#= Procedure.FullName #>".Equals(command.CommandText, global::System.StringComparison.OrdinalIgnoreCase));				
		m_command = command;
	}

	<# foreach(var p in outputParameters){ 
		int ordinal = parameters.IndexOf(p);
		var csParameterName = Regex.Replace(p.ParameterName, "^@", string.Empty);
		var typeName = ixPropertyTypeNamesByParameter[p];
		var propertyName = GetPropertyName(p.ParameterName); #> 
	/// <summary>
	/// 
	/// </summary>
	[<#= SqlParameterAttribute #>(<#= ordinal #>,"<#= csParameterName #>", global::System.Data.SqlDbType.<#= p.SqlDbType #>, global::System.Data.ParameterDirection.<#= p.Direction #>)]
	public <#= typeName #> <#= propertyName #> => <#= utilsClassName #>.ToClrValue<<#= typeName #>>(m_command.Parameters["<#= p.ParameterName #>"].Value);
	<# } #> 
}
<# } #>


<# for(int i = 0; i < adapterClassNames.Count; ++i){ 
	string className = adapterClassNames[i]; 
	string nextReaderClassName = i+1 < adapterClassNames.Count ? adapterClassNames[i+1] : null; 
	var schema = resultSchemas[i]; #>
/// <summary>
/// <#= Procedure.FullName #> query result[<#= i #>]. 
/// </summary>
public partial struct <#= className #>
{
	/// <summary>
	/// Gets the inner <see cref="System.Data.SqlClient.SqlDataReader"/> object.
	/// </summary>
	public global::System.Data.SqlClient.SqlDataReader InnerReader { get; }

	/// <summary>
    /// Initializes a new instance of the <see cref="<#= className #>"/> struct.
    /// </summary>
    /// <param name="reader">The inner <see cref="System.Data.SqlClient.SqlDataReader"/>.</param>
    /// <exception cref="System.ArgumentNullException">reader</exception>
	public <#= className #>(
		global::System.Data.SqlClient.SqlDataReader reader) : this()
	{
		if(ReferenceEquals(reader, null))
			throw new global::System.ArgumentNullException(nameof(reader));
		InnerReader = reader;
	}

	/// <summary>
	/// An asynchronous version of Read, which advances the inner <see cref="System.Data.SqlClient.SqlDataReader"/> to the next record in a result set. 
	/// This method invokes ReadAsync with CancellationToken.None.
	/// </summary>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public global::System.Threading.Tasks.Task<bool> ReadAsync() { return InnerReader.ReadAsync(global::System.Threading.CancellationToken.None); }

	/// <summary>
	/// An asynchronous version of Read, which advances the inner <see cref="System.Data.SqlClient.SqlDataReader"/> to the next record in a result set. 
	/// </summary>
	/// <param name="token">The cancellation instruction.</param>
	/// <returns>A task representing the asynchronous operation.</returns>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public global::System.Threading.Tasks.Task<bool> ReadAsync(global::System.Threading.CancellationToken token) { return InnerReader.ReadAsync(token); }


	/// <summary>
	/// Advances the inner <see cref="System.Data.SqlClient.SqlDataReader"/> to the next record.
	/// </summary>
	/// <returns>true if there are more rows; otherwise false.</returns>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public bool Read() { return InnerReader.Read(); } <# if( nextReaderClassName != null ){ #> 

	/// <summary>
	/// Advances the inner data reader to the next result, when reading the results of batch Transact-SQL statements.
	/// </summary>
	/// <returns>Next result <see cref="<#= nextReaderClassName #>"/> typed record adapter.</returns>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public <#= nextReaderClassName #> NextResult() 
	{ 
		if(!InnerReader.NextResult())
			throw new global::System.InvalidOperationException($"<#= Procedure.FullName #> > InnerReader.NextResult() returned false (next result number: <#= i+1 #>).");
		return new <#= nextReaderClassName #>(InnerReader); 
	}

	/// <summary>
	/// An asynchronous version of NextResult, which advances the inner reader to the next result when reading the results of a batch of statements.
	/// </summary>
	/// <param name="token">The cancellation instruction.</param>
	/// <returns>Next result <see cref="<#= nextReaderClassName #>"/> typed record adapter.</returns>
	/// <exception cref="System.InvalidOperationException"></exception>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public async global::System.Threading.Tasks.Task<<#= nextReaderClassName #>> NextResultAsync(global::System.Threading.CancellationToken token) 
	{ 
		if(!(await InnerReader.NextResultAsync(token)))
			throw new global::System.InvalidOperationException($"<#= Procedure.FullName #> > InnerReader.NextResult() returned false (next result number: <#= i+1 #>).");
		return new <#= nextReaderClassName #>(InnerReader); 
	}

	/// <summary>
	/// An asynchronous version of NextResult, which advances the inner reader to the next result when reading the results of a batch of statements.
	/// This method invokes NextResultAsync with CancellationToken.None.
	/// </summary>
	/// <returns>Next result <see cref="<#= nextReaderClassName #>"/> typed record adapter.</returns>
	/// <exception cref="System.InvalidOperationException"></exception>
	[<#= DebuggerNonUserCodeAttribute #>]
	[<#= GeneratedCodeAttribute #>]
	public global::System.Threading.Tasks.Task<<#= nextReaderClassName #>> NextResultAsync() { return this.NextResultAsync(global::System.Threading.CancellationToken.None); }
	<# } #> 

	<# foreach(DataColumn column in schema.Columns){ 
		int ordinal = column.Ordinal;
		string propertyName = GetPropertyName(column.ColumnName);
		string propertyDataType = GetPropertyTypeName(column.DataType, column.AllowDBNull); #> 
	/// <summary>
	/// 
	/// </summary>
	public <#= propertyDataType #> <#= propertyName #> => <#= utilsClassName #>.ToClrValue<<#= propertyDataType #>>(InnerReader[<#= ordinal #>]); <# } #> 
}
<# } #>